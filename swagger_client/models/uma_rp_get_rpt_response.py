# coding: utf-8

"""
    oxd-server

    oxd-server  # noqa: E501

    OpenAPI spec version: 4.0
    Contact: yuriyz@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UmaRpGetRptResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pct': 'str',
        'updated': 'bool',
        'access_token': 'str',
        'token_type': 'str'
    }

    attribute_map = {
        'pct': 'pct',
        'updated': 'updated',
        'access_token': 'access_token',
        'token_type': 'token_type'
    }

    def __init__(self, pct=None, updated=None, access_token=None, token_type=None):  # noqa: E501
        """UmaRpGetRptResponse - a model defined in Swagger"""  # noqa: E501

        self._pct = None
        self._updated = None
        self._access_token = None
        self._token_type = None
        self.discriminator = None

        self.pct = pct
        self.updated = updated
        self.access_token = access_token
        self.token_type = token_type

    @property
    def pct(self):
        """Gets the pct of this UmaRpGetRptResponse.  # noqa: E501


        :return: The pct of this UmaRpGetRptResponse.  # noqa: E501
        :rtype: str
        """
        return self._pct

    @pct.setter
    def pct(self, pct):
        """Sets the pct of this UmaRpGetRptResponse.


        :param pct: The pct of this UmaRpGetRptResponse.  # noqa: E501
        :type: str
        """
        if pct is None:
            raise ValueError("Invalid value for `pct`, must not be `None`")  # noqa: E501

        self._pct = pct

    @property
    def updated(self):
        """Gets the updated of this UmaRpGetRptResponse.  # noqa: E501


        :return: The updated of this UmaRpGetRptResponse.  # noqa: E501
        :rtype: bool
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this UmaRpGetRptResponse.


        :param updated: The updated of this UmaRpGetRptResponse.  # noqa: E501
        :type: bool
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def access_token(self):
        """Gets the access_token of this UmaRpGetRptResponse.  # noqa: E501


        :return: The access_token of this UmaRpGetRptResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this UmaRpGetRptResponse.


        :param access_token: The access_token of this UmaRpGetRptResponse.  # noqa: E501
        :type: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    @property
    def token_type(self):
        """Gets the token_type of this UmaRpGetRptResponse.  # noqa: E501


        :return: The token_type of this UmaRpGetRptResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this UmaRpGetRptResponse.


        :param token_type: The token_type of this UmaRpGetRptResponse.  # noqa: E501
        :type: str
        """
        if token_type is None:
            raise ValueError("Invalid value for `token_type`, must not be `None`")  # noqa: E501

        self._token_type = token_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UmaRpGetRptResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UmaRpGetRptResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
