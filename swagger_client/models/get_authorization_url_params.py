# coding: utf-8

"""
    oxd-server

    oxd-server  # noqa: E501

    OpenAPI spec version: 4.0
    Contact: yuriyz@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetAuthorizationUrlParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'oxd_id': 'str',
        'scope': 'list[str]',
        'acr_values': 'list[str]',
        'prompt': 'str',
        'state': 'str',
        'redirect_uri': 'str',
        'response_types': 'list[str]',
        'custom_parameters': 'dict(str, str)',
        'params': 'dict(str, str)'
    }

    attribute_map = {
        'oxd_id': 'oxd_id',
        'scope': 'scope',
        'acr_values': 'acr_values',
        'prompt': 'prompt',
        'state': 'state',
        'redirect_uri': 'redirect_uri',
        'response_types': 'response_types',
        'custom_parameters': 'custom_parameters',
        'params': 'params'
    }

    def __init__(self, oxd_id=None, scope=None, acr_values=None, prompt=None, state=None, redirect_uri=None, response_types=None, custom_parameters=None, params=None):  # noqa: E501
        """GetAuthorizationUrlParams - a model defined in Swagger"""  # noqa: E501

        self._oxd_id = None
        self._scope = None
        self._acr_values = None
        self._prompt = None
        self._state = None
        self._redirect_uri = None
        self._response_types = None
        self._custom_parameters = None
        self._params = None
        self.discriminator = None

        self.oxd_id = oxd_id
        if scope is not None:
            self.scope = scope
        if acr_values is not None:
            self.acr_values = acr_values
        if prompt is not None:
            self.prompt = prompt
        if state is not None:
            self.state = state
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if response_types is not None:
            self.response_types = response_types
        if custom_parameters is not None:
            self.custom_parameters = custom_parameters
        if params is not None:
            self.params = params

    @property
    def oxd_id(self):
        """Gets the oxd_id of this GetAuthorizationUrlParams.  # noqa: E501


        :return: The oxd_id of this GetAuthorizationUrlParams.  # noqa: E501
        :rtype: str
        """
        return self._oxd_id

    @oxd_id.setter
    def oxd_id(self, oxd_id):
        """Sets the oxd_id of this GetAuthorizationUrlParams.


        :param oxd_id: The oxd_id of this GetAuthorizationUrlParams.  # noqa: E501
        :type: str
        """
        if oxd_id is None:
            raise ValueError("Invalid value for `oxd_id`, must not be `None`")  # noqa: E501

        self._oxd_id = oxd_id

    @property
    def scope(self):
        """Gets the scope of this GetAuthorizationUrlParams.  # noqa: E501


        :return: The scope of this GetAuthorizationUrlParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this GetAuthorizationUrlParams.


        :param scope: The scope of this GetAuthorizationUrlParams.  # noqa: E501
        :type: list[str]
        """

        self._scope = scope

    @property
    def acr_values(self):
        """Gets the acr_values of this GetAuthorizationUrlParams.  # noqa: E501


        :return: The acr_values of this GetAuthorizationUrlParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._acr_values

    @acr_values.setter
    def acr_values(self, acr_values):
        """Sets the acr_values of this GetAuthorizationUrlParams.


        :param acr_values: The acr_values of this GetAuthorizationUrlParams.  # noqa: E501
        :type: list[str]
        """

        self._acr_values = acr_values

    @property
    def prompt(self):
        """Gets the prompt of this GetAuthorizationUrlParams.  # noqa: E501


        :return: The prompt of this GetAuthorizationUrlParams.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this GetAuthorizationUrlParams.


        :param prompt: The prompt of this GetAuthorizationUrlParams.  # noqa: E501
        :type: str
        """

        self._prompt = prompt

    @property
    def state(self):
        """Gets the state of this GetAuthorizationUrlParams.  # noqa: E501


        :return: The state of this GetAuthorizationUrlParams.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetAuthorizationUrlParams.


        :param state: The state of this GetAuthorizationUrlParams.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this GetAuthorizationUrlParams.  # noqa: E501


        :return: The redirect_uri of this GetAuthorizationUrlParams.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this GetAuthorizationUrlParams.


        :param redirect_uri: The redirect_uri of this GetAuthorizationUrlParams.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def response_types(self):
        """Gets the response_types of this GetAuthorizationUrlParams.  # noqa: E501

        Provide a list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code response type.  # noqa: E501

        :return: The response_types of this GetAuthorizationUrlParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types

    @response_types.setter
    def response_types(self, response_types):
        """Sets the response_types of this GetAuthorizationUrlParams.

        Provide a list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code response type.  # noqa: E501

        :param response_types: The response_types of this GetAuthorizationUrlParams.  # noqa: E501
        :type: list[str]
        """

        self._response_types = response_types

    @property
    def custom_parameters(self):
        """Gets the custom_parameters of this GetAuthorizationUrlParams.  # noqa: E501


        :return: The custom_parameters of this GetAuthorizationUrlParams.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_parameters

    @custom_parameters.setter
    def custom_parameters(self, custom_parameters):
        """Sets the custom_parameters of this GetAuthorizationUrlParams.


        :param custom_parameters: The custom_parameters of this GetAuthorizationUrlParams.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_parameters = custom_parameters

    @property
    def params(self):
        """Gets the params of this GetAuthorizationUrlParams.  # noqa: E501


        :return: The params of this GetAuthorizationUrlParams.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this GetAuthorizationUrlParams.


        :param params: The params of this GetAuthorizationUrlParams.  # noqa: E501
        :type: dict(str, str)
        """

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAuthorizationUrlParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAuthorizationUrlParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
