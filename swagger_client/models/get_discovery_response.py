# coding: utf-8

"""
    oxd-server

    oxd-server  # noqa: E501

    OpenAPI spec version: 4.0
    Contact: yuriyz@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetDiscoveryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issuer': 'str',
        'authorization_endpoint': 'str',
        'token_endpoint': 'str',
        'token_revocation_endpoint': 'str',
        'user_info_endpoint': 'str',
        'client_info_endpoint': 'str',
        'check_session_iframe': 'str',
        'end_session_endpoint': 'str',
        'jwks_uri': 'str',
        'registration_endpoint': 'str',
        'id_generation_endpoint': 'str',
        'introspection_endpoint': 'str',
        'scopes_supported': 'list[str]',
        'response_types_supported': 'list[str]',
        'grant_types_supported': 'list[str]',
        'acr_values_supported': 'list[str]',
        'subject_types_supported': 'list[str]',
        'user_info_signing_alg_values_supported': 'list[str]',
        'user_info_encryption_alg_values_supported': 'list[str]',
        'user_info_encryption_enc_values_supported': 'list[str]',
        'id_token_signing_alg_values_supported': 'list[str]',
        'id_token_encryption_alg_values_supported': 'list[str]',
        'id_token_encryption_enc_values_supported': 'list[str]',
        'request_object_signing_alg_values_supported': 'list[str]',
        'request_object_encryption_alg_values_supported': 'list[str]',
        'request_object_encryption_enc_values_supported': 'list[str]',
        'token_endpoint_auth_methods_supported': 'list[str]',
        'token_endpoint_auth_signing_alg_values_supported': 'list[str]',
        'display_values_supported': 'list[str]',
        'claim_types_supported': 'list[str]',
        'claims_supported': 'list[str]',
        'id_token_token_binding_cnf_values_supported': 'list[str]',
        'service_documentation': 'str',
        'claims_locales_supported': 'list[str]',
        'ui_locales_supported': 'list[str]',
        'claims_parameter_supported': 'bool',
        'request_parameter_supported': 'bool',
        'request_uri_parameter_supported': 'bool',
        'require_request_uri_registration': 'bool',
        'tls_client_certificate_bound_access_tokens': 'bool',
        'front_channel_logout_supported': 'bool',
        'front_channel_logout_session_supported': 'bool',
        'op_policy_uri': 'str',
        'op_tos_uri': 'str',
        'scope_to_claims_mapping': 'object'
    }

    attribute_map = {
        'issuer': 'issuer',
        'authorization_endpoint': 'authorization_endpoint',
        'token_endpoint': 'token_endpoint',
        'token_revocation_endpoint': 'token_revocation_endpoint',
        'user_info_endpoint': 'user_info_endpoint',
        'client_info_endpoint': 'client_info_endpoint',
        'check_session_iframe': 'check_session_iframe',
        'end_session_endpoint': 'end_session_endpoint',
        'jwks_uri': 'jwks_uri',
        'registration_endpoint': 'registration_endpoint',
        'id_generation_endpoint': 'id_generation_endpoint',
        'introspection_endpoint': 'introspection_endpoint',
        'scopes_supported': 'scopes_supported',
        'response_types_supported': 'response_types_supported',
        'grant_types_supported': 'grant_types_supported',
        'acr_values_supported': 'acr_values_supported',
        'subject_types_supported': 'subject_types_supported',
        'user_info_signing_alg_values_supported': 'user_info_signing_alg_values_supported',
        'user_info_encryption_alg_values_supported': 'user_info_encryption_alg_values_supported',
        'user_info_encryption_enc_values_supported': 'user_info_encryption_enc_values_supported',
        'id_token_signing_alg_values_supported': 'id_token_signing_alg_values_supported',
        'id_token_encryption_alg_values_supported': 'id_token_encryption_alg_values_supported',
        'id_token_encryption_enc_values_supported': 'id_token_encryption_enc_values_supported',
        'request_object_signing_alg_values_supported': 'request_object_signing_alg_values_supported',
        'request_object_encryption_alg_values_supported': 'request_object_encryption_alg_values_supported',
        'request_object_encryption_enc_values_supported': 'request_object_encryption_enc_values_supported',
        'token_endpoint_auth_methods_supported': 'token_endpoint_auth_methods_supported',
        'token_endpoint_auth_signing_alg_values_supported': 'token_endpoint_auth_signing_alg_values_supported',
        'display_values_supported': 'display_values_supported',
        'claim_types_supported': 'claim_types_supported',
        'claims_supported': 'claims_supported',
        'id_token_token_binding_cnf_values_supported': 'id_token_token_binding_cnf_values_supported',
        'service_documentation': 'service_documentation',
        'claims_locales_supported': 'claims_locales_supported',
        'ui_locales_supported': 'ui_locales_supported',
        'claims_parameter_supported': 'claims_parameter_supported',
        'request_parameter_supported': 'request_parameter_supported',
        'request_uri_parameter_supported': 'request_uri_parameter_supported',
        'require_request_uri_registration': 'require_request_uri_registration',
        'tls_client_certificate_bound_access_tokens': 'tls_client_certificate_bound_access_tokens',
        'front_channel_logout_supported': 'front_channel_logout_supported',
        'front_channel_logout_session_supported': 'front_channel_logout_session_supported',
        'op_policy_uri': 'op_policy_uri',
        'op_tos_uri': 'op_tos_uri',
        'scope_to_claims_mapping': 'scope_to_claims_mapping'
    }

    def __init__(self, issuer=None, authorization_endpoint=None, token_endpoint=None, token_revocation_endpoint=None, user_info_endpoint=None, client_info_endpoint=None, check_session_iframe=None, end_session_endpoint=None, jwks_uri=None, registration_endpoint=None, id_generation_endpoint=None, introspection_endpoint=None, scopes_supported=None, response_types_supported=None, grant_types_supported=None, acr_values_supported=None, subject_types_supported=None, user_info_signing_alg_values_supported=None, user_info_encryption_alg_values_supported=None, user_info_encryption_enc_values_supported=None, id_token_signing_alg_values_supported=None, id_token_encryption_alg_values_supported=None, id_token_encryption_enc_values_supported=None, request_object_signing_alg_values_supported=None, request_object_encryption_alg_values_supported=None, request_object_encryption_enc_values_supported=None, token_endpoint_auth_methods_supported=None, token_endpoint_auth_signing_alg_values_supported=None, display_values_supported=None, claim_types_supported=None, claims_supported=None, id_token_token_binding_cnf_values_supported=None, service_documentation=None, claims_locales_supported=None, ui_locales_supported=None, claims_parameter_supported=None, request_parameter_supported=None, request_uri_parameter_supported=None, require_request_uri_registration=None, tls_client_certificate_bound_access_tokens=None, front_channel_logout_supported=None, front_channel_logout_session_supported=None, op_policy_uri=None, op_tos_uri=None, scope_to_claims_mapping=None):  # noqa: E501
        """GetDiscoveryResponse - a model defined in Swagger"""  # noqa: E501

        self._issuer = None
        self._authorization_endpoint = None
        self._token_endpoint = None
        self._token_revocation_endpoint = None
        self._user_info_endpoint = None
        self._client_info_endpoint = None
        self._check_session_iframe = None
        self._end_session_endpoint = None
        self._jwks_uri = None
        self._registration_endpoint = None
        self._id_generation_endpoint = None
        self._introspection_endpoint = None
        self._scopes_supported = None
        self._response_types_supported = None
        self._grant_types_supported = None
        self._acr_values_supported = None
        self._subject_types_supported = None
        self._user_info_signing_alg_values_supported = None
        self._user_info_encryption_alg_values_supported = None
        self._user_info_encryption_enc_values_supported = None
        self._id_token_signing_alg_values_supported = None
        self._id_token_encryption_alg_values_supported = None
        self._id_token_encryption_enc_values_supported = None
        self._request_object_signing_alg_values_supported = None
        self._request_object_encryption_alg_values_supported = None
        self._request_object_encryption_enc_values_supported = None
        self._token_endpoint_auth_methods_supported = None
        self._token_endpoint_auth_signing_alg_values_supported = None
        self._display_values_supported = None
        self._claim_types_supported = None
        self._claims_supported = None
        self._id_token_token_binding_cnf_values_supported = None
        self._service_documentation = None
        self._claims_locales_supported = None
        self._ui_locales_supported = None
        self._claims_parameter_supported = None
        self._request_parameter_supported = None
        self._request_uri_parameter_supported = None
        self._require_request_uri_registration = None
        self._tls_client_certificate_bound_access_tokens = None
        self._front_channel_logout_supported = None
        self._front_channel_logout_session_supported = None
        self._op_policy_uri = None
        self._op_tos_uri = None
        self._scope_to_claims_mapping = None
        self.discriminator = None

        if issuer is not None:
            self.issuer = issuer
        if authorization_endpoint is not None:
            self.authorization_endpoint = authorization_endpoint
        if token_endpoint is not None:
            self.token_endpoint = token_endpoint
        if token_revocation_endpoint is not None:
            self.token_revocation_endpoint = token_revocation_endpoint
        if user_info_endpoint is not None:
            self.user_info_endpoint = user_info_endpoint
        if client_info_endpoint is not None:
            self.client_info_endpoint = client_info_endpoint
        if check_session_iframe is not None:
            self.check_session_iframe = check_session_iframe
        if end_session_endpoint is not None:
            self.end_session_endpoint = end_session_endpoint
        if jwks_uri is not None:
            self.jwks_uri = jwks_uri
        if registration_endpoint is not None:
            self.registration_endpoint = registration_endpoint
        if id_generation_endpoint is not None:
            self.id_generation_endpoint = id_generation_endpoint
        if introspection_endpoint is not None:
            self.introspection_endpoint = introspection_endpoint
        if scopes_supported is not None:
            self.scopes_supported = scopes_supported
        if response_types_supported is not None:
            self.response_types_supported = response_types_supported
        if grant_types_supported is not None:
            self.grant_types_supported = grant_types_supported
        if acr_values_supported is not None:
            self.acr_values_supported = acr_values_supported
        if subject_types_supported is not None:
            self.subject_types_supported = subject_types_supported
        if user_info_signing_alg_values_supported is not None:
            self.user_info_signing_alg_values_supported = user_info_signing_alg_values_supported
        if user_info_encryption_alg_values_supported is not None:
            self.user_info_encryption_alg_values_supported = user_info_encryption_alg_values_supported
        if user_info_encryption_enc_values_supported is not None:
            self.user_info_encryption_enc_values_supported = user_info_encryption_enc_values_supported
        if id_token_signing_alg_values_supported is not None:
            self.id_token_signing_alg_values_supported = id_token_signing_alg_values_supported
        if id_token_encryption_alg_values_supported is not None:
            self.id_token_encryption_alg_values_supported = id_token_encryption_alg_values_supported
        if id_token_encryption_enc_values_supported is not None:
            self.id_token_encryption_enc_values_supported = id_token_encryption_enc_values_supported
        if request_object_signing_alg_values_supported is not None:
            self.request_object_signing_alg_values_supported = request_object_signing_alg_values_supported
        if request_object_encryption_alg_values_supported is not None:
            self.request_object_encryption_alg_values_supported = request_object_encryption_alg_values_supported
        if request_object_encryption_enc_values_supported is not None:
            self.request_object_encryption_enc_values_supported = request_object_encryption_enc_values_supported
        if token_endpoint_auth_methods_supported is not None:
            self.token_endpoint_auth_methods_supported = token_endpoint_auth_methods_supported
        if token_endpoint_auth_signing_alg_values_supported is not None:
            self.token_endpoint_auth_signing_alg_values_supported = token_endpoint_auth_signing_alg_values_supported
        if display_values_supported is not None:
            self.display_values_supported = display_values_supported
        if claim_types_supported is not None:
            self.claim_types_supported = claim_types_supported
        if claims_supported is not None:
            self.claims_supported = claims_supported
        if id_token_token_binding_cnf_values_supported is not None:
            self.id_token_token_binding_cnf_values_supported = id_token_token_binding_cnf_values_supported
        if service_documentation is not None:
            self.service_documentation = service_documentation
        if claims_locales_supported is not None:
            self.claims_locales_supported = claims_locales_supported
        if ui_locales_supported is not None:
            self.ui_locales_supported = ui_locales_supported
        if claims_parameter_supported is not None:
            self.claims_parameter_supported = claims_parameter_supported
        if request_parameter_supported is not None:
            self.request_parameter_supported = request_parameter_supported
        if request_uri_parameter_supported is not None:
            self.request_uri_parameter_supported = request_uri_parameter_supported
        if require_request_uri_registration is not None:
            self.require_request_uri_registration = require_request_uri_registration
        if tls_client_certificate_bound_access_tokens is not None:
            self.tls_client_certificate_bound_access_tokens = tls_client_certificate_bound_access_tokens
        if front_channel_logout_supported is not None:
            self.front_channel_logout_supported = front_channel_logout_supported
        if front_channel_logout_session_supported is not None:
            self.front_channel_logout_session_supported = front_channel_logout_session_supported
        if op_policy_uri is not None:
            self.op_policy_uri = op_policy_uri
        if op_tos_uri is not None:
            self.op_tos_uri = op_tos_uri
        if scope_to_claims_mapping is not None:
            self.scope_to_claims_mapping = scope_to_claims_mapping

    @property
    def issuer(self):
        """Gets the issuer of this GetDiscoveryResponse.  # noqa: E501


        :return: The issuer of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this GetDiscoveryResponse.


        :param issuer: The issuer of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this GetDiscoveryResponse.  # noqa: E501


        :return: The authorization_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this GetDiscoveryResponse.


        :param authorization_endpoint: The authorization_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._authorization_endpoint = authorization_endpoint

    @property
    def token_endpoint(self):
        """Gets the token_endpoint of this GetDiscoveryResponse.  # noqa: E501


        :return: The token_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        """Sets the token_endpoint of this GetDiscoveryResponse.


        :param token_endpoint: The token_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._token_endpoint = token_endpoint

    @property
    def token_revocation_endpoint(self):
        """Gets the token_revocation_endpoint of this GetDiscoveryResponse.  # noqa: E501


        :return: The token_revocation_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_revocation_endpoint

    @token_revocation_endpoint.setter
    def token_revocation_endpoint(self, token_revocation_endpoint):
        """Sets the token_revocation_endpoint of this GetDiscoveryResponse.


        :param token_revocation_endpoint: The token_revocation_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._token_revocation_endpoint = token_revocation_endpoint

    @property
    def user_info_endpoint(self):
        """Gets the user_info_endpoint of this GetDiscoveryResponse.  # noqa: E501


        :return: The user_info_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_info_endpoint

    @user_info_endpoint.setter
    def user_info_endpoint(self, user_info_endpoint):
        """Sets the user_info_endpoint of this GetDiscoveryResponse.


        :param user_info_endpoint: The user_info_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._user_info_endpoint = user_info_endpoint

    @property
    def client_info_endpoint(self):
        """Gets the client_info_endpoint of this GetDiscoveryResponse.  # noqa: E501


        :return: The client_info_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_info_endpoint

    @client_info_endpoint.setter
    def client_info_endpoint(self, client_info_endpoint):
        """Sets the client_info_endpoint of this GetDiscoveryResponse.


        :param client_info_endpoint: The client_info_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._client_info_endpoint = client_info_endpoint

    @property
    def check_session_iframe(self):
        """Gets the check_session_iframe of this GetDiscoveryResponse.  # noqa: E501


        :return: The check_session_iframe of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._check_session_iframe

    @check_session_iframe.setter
    def check_session_iframe(self, check_session_iframe):
        """Sets the check_session_iframe of this GetDiscoveryResponse.


        :param check_session_iframe: The check_session_iframe of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._check_session_iframe = check_session_iframe

    @property
    def end_session_endpoint(self):
        """Gets the end_session_endpoint of this GetDiscoveryResponse.  # noqa: E501


        :return: The end_session_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._end_session_endpoint

    @end_session_endpoint.setter
    def end_session_endpoint(self, end_session_endpoint):
        """Sets the end_session_endpoint of this GetDiscoveryResponse.


        :param end_session_endpoint: The end_session_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._end_session_endpoint = end_session_endpoint

    @property
    def jwks_uri(self):
        """Gets the jwks_uri of this GetDiscoveryResponse.  # noqa: E501


        :return: The jwks_uri of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._jwks_uri

    @jwks_uri.setter
    def jwks_uri(self, jwks_uri):
        """Sets the jwks_uri of this GetDiscoveryResponse.


        :param jwks_uri: The jwks_uri of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._jwks_uri = jwks_uri

    @property
    def registration_endpoint(self):
        """Gets the registration_endpoint of this GetDiscoveryResponse.  # noqa: E501


        :return: The registration_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._registration_endpoint

    @registration_endpoint.setter
    def registration_endpoint(self, registration_endpoint):
        """Sets the registration_endpoint of this GetDiscoveryResponse.


        :param registration_endpoint: The registration_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._registration_endpoint = registration_endpoint

    @property
    def id_generation_endpoint(self):
        """Gets the id_generation_endpoint of this GetDiscoveryResponse.  # noqa: E501


        :return: The id_generation_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._id_generation_endpoint

    @id_generation_endpoint.setter
    def id_generation_endpoint(self, id_generation_endpoint):
        """Sets the id_generation_endpoint of this GetDiscoveryResponse.


        :param id_generation_endpoint: The id_generation_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._id_generation_endpoint = id_generation_endpoint

    @property
    def introspection_endpoint(self):
        """Gets the introspection_endpoint of this GetDiscoveryResponse.  # noqa: E501


        :return: The introspection_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._introspection_endpoint

    @introspection_endpoint.setter
    def introspection_endpoint(self, introspection_endpoint):
        """Sets the introspection_endpoint of this GetDiscoveryResponse.


        :param introspection_endpoint: The introspection_endpoint of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._introspection_endpoint = introspection_endpoint

    @property
    def scopes_supported(self):
        """Gets the scopes_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The scopes_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes_supported

    @scopes_supported.setter
    def scopes_supported(self, scopes_supported):
        """Sets the scopes_supported of this GetDiscoveryResponse.


        :param scopes_supported: The scopes_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._scopes_supported = scopes_supported

    @property
    def response_types_supported(self):
        """Gets the response_types_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The response_types_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types_supported

    @response_types_supported.setter
    def response_types_supported(self, response_types_supported):
        """Sets the response_types_supported of this GetDiscoveryResponse.


        :param response_types_supported: The response_types_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._response_types_supported = response_types_supported

    @property
    def grant_types_supported(self):
        """Gets the grant_types_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The grant_types_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._grant_types_supported

    @grant_types_supported.setter
    def grant_types_supported(self, grant_types_supported):
        """Sets the grant_types_supported of this GetDiscoveryResponse.


        :param grant_types_supported: The grant_types_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._grant_types_supported = grant_types_supported

    @property
    def acr_values_supported(self):
        """Gets the acr_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The acr_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._acr_values_supported

    @acr_values_supported.setter
    def acr_values_supported(self, acr_values_supported):
        """Sets the acr_values_supported of this GetDiscoveryResponse.


        :param acr_values_supported: The acr_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._acr_values_supported = acr_values_supported

    @property
    def subject_types_supported(self):
        """Gets the subject_types_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The subject_types_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_types_supported

    @subject_types_supported.setter
    def subject_types_supported(self, subject_types_supported):
        """Sets the subject_types_supported of this GetDiscoveryResponse.


        :param subject_types_supported: The subject_types_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._subject_types_supported = subject_types_supported

    @property
    def user_info_signing_alg_values_supported(self):
        """Gets the user_info_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The user_info_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_info_signing_alg_values_supported

    @user_info_signing_alg_values_supported.setter
    def user_info_signing_alg_values_supported(self, user_info_signing_alg_values_supported):
        """Sets the user_info_signing_alg_values_supported of this GetDiscoveryResponse.


        :param user_info_signing_alg_values_supported: The user_info_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._user_info_signing_alg_values_supported = user_info_signing_alg_values_supported

    @property
    def user_info_encryption_alg_values_supported(self):
        """Gets the user_info_encryption_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The user_info_encryption_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_info_encryption_alg_values_supported

    @user_info_encryption_alg_values_supported.setter
    def user_info_encryption_alg_values_supported(self, user_info_encryption_alg_values_supported):
        """Sets the user_info_encryption_alg_values_supported of this GetDiscoveryResponse.


        :param user_info_encryption_alg_values_supported: The user_info_encryption_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._user_info_encryption_alg_values_supported = user_info_encryption_alg_values_supported

    @property
    def user_info_encryption_enc_values_supported(self):
        """Gets the user_info_encryption_enc_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The user_info_encryption_enc_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_info_encryption_enc_values_supported

    @user_info_encryption_enc_values_supported.setter
    def user_info_encryption_enc_values_supported(self, user_info_encryption_enc_values_supported):
        """Sets the user_info_encryption_enc_values_supported of this GetDiscoveryResponse.


        :param user_info_encryption_enc_values_supported: The user_info_encryption_enc_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._user_info_encryption_enc_values_supported = user_info_encryption_enc_values_supported

    @property
    def id_token_signing_alg_values_supported(self):
        """Gets the id_token_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The id_token_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_token_signing_alg_values_supported

    @id_token_signing_alg_values_supported.setter
    def id_token_signing_alg_values_supported(self, id_token_signing_alg_values_supported):
        """Sets the id_token_signing_alg_values_supported of this GetDiscoveryResponse.


        :param id_token_signing_alg_values_supported: The id_token_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._id_token_signing_alg_values_supported = id_token_signing_alg_values_supported

    @property
    def id_token_encryption_alg_values_supported(self):
        """Gets the id_token_encryption_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The id_token_encryption_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_token_encryption_alg_values_supported

    @id_token_encryption_alg_values_supported.setter
    def id_token_encryption_alg_values_supported(self, id_token_encryption_alg_values_supported):
        """Sets the id_token_encryption_alg_values_supported of this GetDiscoveryResponse.


        :param id_token_encryption_alg_values_supported: The id_token_encryption_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._id_token_encryption_alg_values_supported = id_token_encryption_alg_values_supported

    @property
    def id_token_encryption_enc_values_supported(self):
        """Gets the id_token_encryption_enc_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The id_token_encryption_enc_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_token_encryption_enc_values_supported

    @id_token_encryption_enc_values_supported.setter
    def id_token_encryption_enc_values_supported(self, id_token_encryption_enc_values_supported):
        """Sets the id_token_encryption_enc_values_supported of this GetDiscoveryResponse.


        :param id_token_encryption_enc_values_supported: The id_token_encryption_enc_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._id_token_encryption_enc_values_supported = id_token_encryption_enc_values_supported

    @property
    def request_object_signing_alg_values_supported(self):
        """Gets the request_object_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The request_object_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._request_object_signing_alg_values_supported

    @request_object_signing_alg_values_supported.setter
    def request_object_signing_alg_values_supported(self, request_object_signing_alg_values_supported):
        """Sets the request_object_signing_alg_values_supported of this GetDiscoveryResponse.


        :param request_object_signing_alg_values_supported: The request_object_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._request_object_signing_alg_values_supported = request_object_signing_alg_values_supported

    @property
    def request_object_encryption_alg_values_supported(self):
        """Gets the request_object_encryption_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The request_object_encryption_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._request_object_encryption_alg_values_supported

    @request_object_encryption_alg_values_supported.setter
    def request_object_encryption_alg_values_supported(self, request_object_encryption_alg_values_supported):
        """Sets the request_object_encryption_alg_values_supported of this GetDiscoveryResponse.


        :param request_object_encryption_alg_values_supported: The request_object_encryption_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._request_object_encryption_alg_values_supported = request_object_encryption_alg_values_supported

    @property
    def request_object_encryption_enc_values_supported(self):
        """Gets the request_object_encryption_enc_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The request_object_encryption_enc_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._request_object_encryption_enc_values_supported

    @request_object_encryption_enc_values_supported.setter
    def request_object_encryption_enc_values_supported(self, request_object_encryption_enc_values_supported):
        """Sets the request_object_encryption_enc_values_supported of this GetDiscoveryResponse.


        :param request_object_encryption_enc_values_supported: The request_object_encryption_enc_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._request_object_encryption_enc_values_supported = request_object_encryption_enc_values_supported

    @property
    def token_endpoint_auth_methods_supported(self):
        """Gets the token_endpoint_auth_methods_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The token_endpoint_auth_methods_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._token_endpoint_auth_methods_supported

    @token_endpoint_auth_methods_supported.setter
    def token_endpoint_auth_methods_supported(self, token_endpoint_auth_methods_supported):
        """Sets the token_endpoint_auth_methods_supported of this GetDiscoveryResponse.


        :param token_endpoint_auth_methods_supported: The token_endpoint_auth_methods_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._token_endpoint_auth_methods_supported = token_endpoint_auth_methods_supported

    @property
    def token_endpoint_auth_signing_alg_values_supported(self):
        """Gets the token_endpoint_auth_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The token_endpoint_auth_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._token_endpoint_auth_signing_alg_values_supported

    @token_endpoint_auth_signing_alg_values_supported.setter
    def token_endpoint_auth_signing_alg_values_supported(self, token_endpoint_auth_signing_alg_values_supported):
        """Sets the token_endpoint_auth_signing_alg_values_supported of this GetDiscoveryResponse.


        :param token_endpoint_auth_signing_alg_values_supported: The token_endpoint_auth_signing_alg_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._token_endpoint_auth_signing_alg_values_supported = token_endpoint_auth_signing_alg_values_supported

    @property
    def display_values_supported(self):
        """Gets the display_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The display_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._display_values_supported

    @display_values_supported.setter
    def display_values_supported(self, display_values_supported):
        """Sets the display_values_supported of this GetDiscoveryResponse.


        :param display_values_supported: The display_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._display_values_supported = display_values_supported

    @property
    def claim_types_supported(self):
        """Gets the claim_types_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The claim_types_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._claim_types_supported

    @claim_types_supported.setter
    def claim_types_supported(self, claim_types_supported):
        """Sets the claim_types_supported of this GetDiscoveryResponse.


        :param claim_types_supported: The claim_types_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._claim_types_supported = claim_types_supported

    @property
    def claims_supported(self):
        """Gets the claims_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The claims_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims_supported

    @claims_supported.setter
    def claims_supported(self, claims_supported):
        """Sets the claims_supported of this GetDiscoveryResponse.


        :param claims_supported: The claims_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._claims_supported = claims_supported

    @property
    def id_token_token_binding_cnf_values_supported(self):
        """Gets the id_token_token_binding_cnf_values_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The id_token_token_binding_cnf_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_token_token_binding_cnf_values_supported

    @id_token_token_binding_cnf_values_supported.setter
    def id_token_token_binding_cnf_values_supported(self, id_token_token_binding_cnf_values_supported):
        """Sets the id_token_token_binding_cnf_values_supported of this GetDiscoveryResponse.


        :param id_token_token_binding_cnf_values_supported: The id_token_token_binding_cnf_values_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._id_token_token_binding_cnf_values_supported = id_token_token_binding_cnf_values_supported

    @property
    def service_documentation(self):
        """Gets the service_documentation of this GetDiscoveryResponse.  # noqa: E501


        :return: The service_documentation of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._service_documentation

    @service_documentation.setter
    def service_documentation(self, service_documentation):
        """Sets the service_documentation of this GetDiscoveryResponse.


        :param service_documentation: The service_documentation of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._service_documentation = service_documentation

    @property
    def claims_locales_supported(self):
        """Gets the claims_locales_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The claims_locales_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims_locales_supported

    @claims_locales_supported.setter
    def claims_locales_supported(self, claims_locales_supported):
        """Sets the claims_locales_supported of this GetDiscoveryResponse.


        :param claims_locales_supported: The claims_locales_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._claims_locales_supported = claims_locales_supported

    @property
    def ui_locales_supported(self):
        """Gets the ui_locales_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The ui_locales_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._ui_locales_supported

    @ui_locales_supported.setter
    def ui_locales_supported(self, ui_locales_supported):
        """Sets the ui_locales_supported of this GetDiscoveryResponse.


        :param ui_locales_supported: The ui_locales_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: list[str]
        """

        self._ui_locales_supported = ui_locales_supported

    @property
    def claims_parameter_supported(self):
        """Gets the claims_parameter_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The claims_parameter_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._claims_parameter_supported

    @claims_parameter_supported.setter
    def claims_parameter_supported(self, claims_parameter_supported):
        """Sets the claims_parameter_supported of this GetDiscoveryResponse.


        :param claims_parameter_supported: The claims_parameter_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: bool
        """

        self._claims_parameter_supported = claims_parameter_supported

    @property
    def request_parameter_supported(self):
        """Gets the request_parameter_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The request_parameter_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._request_parameter_supported

    @request_parameter_supported.setter
    def request_parameter_supported(self, request_parameter_supported):
        """Sets the request_parameter_supported of this GetDiscoveryResponse.


        :param request_parameter_supported: The request_parameter_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: bool
        """

        self._request_parameter_supported = request_parameter_supported

    @property
    def request_uri_parameter_supported(self):
        """Gets the request_uri_parameter_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The request_uri_parameter_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._request_uri_parameter_supported

    @request_uri_parameter_supported.setter
    def request_uri_parameter_supported(self, request_uri_parameter_supported):
        """Sets the request_uri_parameter_supported of this GetDiscoveryResponse.


        :param request_uri_parameter_supported: The request_uri_parameter_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: bool
        """

        self._request_uri_parameter_supported = request_uri_parameter_supported

    @property
    def require_request_uri_registration(self):
        """Gets the require_request_uri_registration of this GetDiscoveryResponse.  # noqa: E501


        :return: The require_request_uri_registration of this GetDiscoveryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._require_request_uri_registration

    @require_request_uri_registration.setter
    def require_request_uri_registration(self, require_request_uri_registration):
        """Sets the require_request_uri_registration of this GetDiscoveryResponse.


        :param require_request_uri_registration: The require_request_uri_registration of this GetDiscoveryResponse.  # noqa: E501
        :type: bool
        """

        self._require_request_uri_registration = require_request_uri_registration

    @property
    def tls_client_certificate_bound_access_tokens(self):
        """Gets the tls_client_certificate_bound_access_tokens of this GetDiscoveryResponse.  # noqa: E501


        :return: The tls_client_certificate_bound_access_tokens of this GetDiscoveryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._tls_client_certificate_bound_access_tokens

    @tls_client_certificate_bound_access_tokens.setter
    def tls_client_certificate_bound_access_tokens(self, tls_client_certificate_bound_access_tokens):
        """Sets the tls_client_certificate_bound_access_tokens of this GetDiscoveryResponse.


        :param tls_client_certificate_bound_access_tokens: The tls_client_certificate_bound_access_tokens of this GetDiscoveryResponse.  # noqa: E501
        :type: bool
        """

        self._tls_client_certificate_bound_access_tokens = tls_client_certificate_bound_access_tokens

    @property
    def front_channel_logout_supported(self):
        """Gets the front_channel_logout_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The front_channel_logout_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._front_channel_logout_supported

    @front_channel_logout_supported.setter
    def front_channel_logout_supported(self, front_channel_logout_supported):
        """Sets the front_channel_logout_supported of this GetDiscoveryResponse.


        :param front_channel_logout_supported: The front_channel_logout_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: bool
        """

        self._front_channel_logout_supported = front_channel_logout_supported

    @property
    def front_channel_logout_session_supported(self):
        """Gets the front_channel_logout_session_supported of this GetDiscoveryResponse.  # noqa: E501


        :return: The front_channel_logout_session_supported of this GetDiscoveryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._front_channel_logout_session_supported

    @front_channel_logout_session_supported.setter
    def front_channel_logout_session_supported(self, front_channel_logout_session_supported):
        """Sets the front_channel_logout_session_supported of this GetDiscoveryResponse.


        :param front_channel_logout_session_supported: The front_channel_logout_session_supported of this GetDiscoveryResponse.  # noqa: E501
        :type: bool
        """

        self._front_channel_logout_session_supported = front_channel_logout_session_supported

    @property
    def op_policy_uri(self):
        """Gets the op_policy_uri of this GetDiscoveryResponse.  # noqa: E501


        :return: The op_policy_uri of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._op_policy_uri

    @op_policy_uri.setter
    def op_policy_uri(self, op_policy_uri):
        """Sets the op_policy_uri of this GetDiscoveryResponse.


        :param op_policy_uri: The op_policy_uri of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._op_policy_uri = op_policy_uri

    @property
    def op_tos_uri(self):
        """Gets the op_tos_uri of this GetDiscoveryResponse.  # noqa: E501


        :return: The op_tos_uri of this GetDiscoveryResponse.  # noqa: E501
        :rtype: str
        """
        return self._op_tos_uri

    @op_tos_uri.setter
    def op_tos_uri(self, op_tos_uri):
        """Sets the op_tos_uri of this GetDiscoveryResponse.


        :param op_tos_uri: The op_tos_uri of this GetDiscoveryResponse.  # noqa: E501
        :type: str
        """

        self._op_tos_uri = op_tos_uri

    @property
    def scope_to_claims_mapping(self):
        """Gets the scope_to_claims_mapping of this GetDiscoveryResponse.  # noqa: E501


        :return: The scope_to_claims_mapping of this GetDiscoveryResponse.  # noqa: E501
        :rtype: object
        """
        return self._scope_to_claims_mapping

    @scope_to_claims_mapping.setter
    def scope_to_claims_mapping(self, scope_to_claims_mapping):
        """Sets the scope_to_claims_mapping of this GetDiscoveryResponse.


        :param scope_to_claims_mapping: The scope_to_claims_mapping of this GetDiscoveryResponse.  # noqa: E501
        :type: object
        """

        self._scope_to_claims_mapping = scope_to_claims_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetDiscoveryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDiscoveryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
