# coding: utf-8

"""
    oxd-server

    oxd-server  # noqa: E501

    OpenAPI spec version: 4.0
    Contact: yuriyz@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Condition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'http_methods': 'list[str]',
        'scopes': 'list[str]',
        'scope_expression': 'list[str]',
        'ticket_scopes': 'list[str]'
    }

    attribute_map = {
        'http_methods': 'httpMethods',
        'scopes': 'scopes',
        'scope_expression': 'scope_expression',
        'ticket_scopes': 'ticketScopes'
    }

    def __init__(self, http_methods=None, scopes=None, scope_expression=None, ticket_scopes=None):  # noqa: E501
        """Condition - a model defined in Swagger"""  # noqa: E501

        self._http_methods = None
        self._scopes = None
        self._scope_expression = None
        self._ticket_scopes = None
        self.discriminator = None

        self.http_methods = http_methods
        self.scopes = scopes
        self.scope_expression = scope_expression
        self.ticket_scopes = ticket_scopes

    @property
    def http_methods(self):
        """Gets the http_methods of this Condition.  # noqa: E501


        :return: The http_methods of this Condition.  # noqa: E501
        :rtype: list[str]
        """
        return self._http_methods

    @http_methods.setter
    def http_methods(self, http_methods):
        """Sets the http_methods of this Condition.


        :param http_methods: The http_methods of this Condition.  # noqa: E501
        :type: list[str]
        """
        if http_methods is None:
            raise ValueError("Invalid value for `http_methods`, must not be `None`")  # noqa: E501

        self._http_methods = http_methods

    @property
    def scopes(self):
        """Gets the scopes of this Condition.  # noqa: E501


        :return: The scopes of this Condition.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Condition.


        :param scopes: The scopes of this Condition.  # noqa: E501
        :type: list[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")  # noqa: E501

        self._scopes = scopes

    @property
    def scope_expression(self):
        """Gets the scope_expression of this Condition.  # noqa: E501


        :return: The scope_expression of this Condition.  # noqa: E501
        :rtype: list[str]
        """
        return self._scope_expression

    @scope_expression.setter
    def scope_expression(self, scope_expression):
        """Sets the scope_expression of this Condition.


        :param scope_expression: The scope_expression of this Condition.  # noqa: E501
        :type: list[str]
        """
        if scope_expression is None:
            raise ValueError("Invalid value for `scope_expression`, must not be `None`")  # noqa: E501

        self._scope_expression = scope_expression

    @property
    def ticket_scopes(self):
        """Gets the ticket_scopes of this Condition.  # noqa: E501


        :return: The ticket_scopes of this Condition.  # noqa: E501
        :rtype: list[str]
        """
        return self._ticket_scopes

    @ticket_scopes.setter
    def ticket_scopes(self, ticket_scopes):
        """Sets the ticket_scopes of this Condition.


        :param ticket_scopes: The ticket_scopes of this Condition.  # noqa: E501
        :type: list[str]
        """
        if ticket_scopes is None:
            raise ValueError("Invalid value for `ticket_scopes`, must not be `None`")  # noqa: E501

        self._ticket_scopes = ticket_scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Condition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Condition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
