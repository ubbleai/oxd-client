# coding: utf-8

"""
    oxd-server

    oxd-server  # noqa: E501

    OpenAPI spec version: 4.0
    Contact: yuriyz@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IntrospectRptResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'exp': 'int',
        'iat': 'int',
        'nbf': 'int',
        'client_id': 'str',
        'sub': 'str',
        'aud': 'str',
        'iss': 'str',
        'jti': 'str',
        'permissions': 'list[object]'
    }

    attribute_map = {
        'active': 'active',
        'exp': 'exp',
        'iat': 'iat',
        'nbf': 'nbf',
        'client_id': 'client_id',
        'sub': 'sub',
        'aud': 'aud',
        'iss': 'iss',
        'jti': 'jti',
        'permissions': 'permissions'
    }

    def __init__(self, active=None, exp=None, iat=None, nbf=None, client_id=None, sub=None, aud=None, iss=None, jti=None, permissions=None):  # noqa: E501
        """IntrospectRptResponse - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._exp = None
        self._iat = None
        self._nbf = None
        self._client_id = None
        self._sub = None
        self._aud = None
        self._iss = None
        self._jti = None
        self._permissions = None
        self.discriminator = None

        self.active = active
        self.exp = exp
        self.iat = iat
        self.nbf = nbf
        self.client_id = client_id
        if sub is not None:
            self.sub = sub
        self.aud = aud
        self.iss = iss
        if jti is not None:
            self.jti = jti
        self.permissions = permissions

    @property
    def active(self):
        """Gets the active of this IntrospectRptResponse.  # noqa: E501


        :return: The active of this IntrospectRptResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this IntrospectRptResponse.


        :param active: The active of this IntrospectRptResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def exp(self):
        """Gets the exp of this IntrospectRptResponse.  # noqa: E501

        number of seconds since January 1 1970 UTC, indicating when this token will expire  # noqa: E501

        :return: The exp of this IntrospectRptResponse.  # noqa: E501
        :rtype: int
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """Sets the exp of this IntrospectRptResponse.

        number of seconds since January 1 1970 UTC, indicating when this token will expire  # noqa: E501

        :param exp: The exp of this IntrospectRptResponse.  # noqa: E501
        :type: int
        """
        if exp is None:
            raise ValueError("Invalid value for `exp`, must not be `None`")  # noqa: E501

        self._exp = exp

    @property
    def iat(self):
        """Gets the iat of this IntrospectRptResponse.  # noqa: E501

        number of seconds since January 1 1970 UTC, indicating when the token was issued at  # noqa: E501

        :return: The iat of this IntrospectRptResponse.  # noqa: E501
        :rtype: int
        """
        return self._iat

    @iat.setter
    def iat(self, iat):
        """Sets the iat of this IntrospectRptResponse.

        number of seconds since January 1 1970 UTC, indicating when the token was issued at  # noqa: E501

        :param iat: The iat of this IntrospectRptResponse.  # noqa: E501
        :type: int
        """
        if iat is None:
            raise ValueError("Invalid value for `iat`, must not be `None`")  # noqa: E501

        self._iat = iat

    @property
    def nbf(self):
        """Gets the nbf of this IntrospectRptResponse.  # noqa: E501

        number of seconds since January 1 1970 UTC, indicating when the token not to be used before  # noqa: E501

        :return: The nbf of this IntrospectRptResponse.  # noqa: E501
        :rtype: int
        """
        return self._nbf

    @nbf.setter
    def nbf(self, nbf):
        """Sets the nbf of this IntrospectRptResponse.

        number of seconds since January 1 1970 UTC, indicating when the token not to be used before  # noqa: E501

        :param nbf: The nbf of this IntrospectRptResponse.  # noqa: E501
        :type: int
        """
        if nbf is None:
            raise ValueError("Invalid value for `nbf`, must not be `None`")  # noqa: E501

        self._nbf = nbf

    @property
    def client_id(self):
        """Gets the client_id of this IntrospectRptResponse.  # noqa: E501


        :return: The client_id of this IntrospectRptResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IntrospectRptResponse.


        :param client_id: The client_id of this IntrospectRptResponse.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def sub(self):
        """Gets the sub of this IntrospectRptResponse.  # noqa: E501


        :return: The sub of this IntrospectRptResponse.  # noqa: E501
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this IntrospectRptResponse.


        :param sub: The sub of this IntrospectRptResponse.  # noqa: E501
        :type: str
        """

        self._sub = sub

    @property
    def aud(self):
        """Gets the aud of this IntrospectRptResponse.  # noqa: E501


        :return: The aud of this IntrospectRptResponse.  # noqa: E501
        :rtype: str
        """
        return self._aud

    @aud.setter
    def aud(self, aud):
        """Sets the aud of this IntrospectRptResponse.


        :param aud: The aud of this IntrospectRptResponse.  # noqa: E501
        :type: str
        """
        if aud is None:
            raise ValueError("Invalid value for `aud`, must not be `None`")  # noqa: E501

        self._aud = aud

    @property
    def iss(self):
        """Gets the iss of this IntrospectRptResponse.  # noqa: E501


        :return: The iss of this IntrospectRptResponse.  # noqa: E501
        :rtype: str
        """
        return self._iss

    @iss.setter
    def iss(self, iss):
        """Sets the iss of this IntrospectRptResponse.


        :param iss: The iss of this IntrospectRptResponse.  # noqa: E501
        :type: str
        """
        if iss is None:
            raise ValueError("Invalid value for `iss`, must not be `None`")  # noqa: E501

        self._iss = iss

    @property
    def jti(self):
        """Gets the jti of this IntrospectRptResponse.  # noqa: E501


        :return: The jti of this IntrospectRptResponse.  # noqa: E501
        :rtype: str
        """
        return self._jti

    @jti.setter
    def jti(self, jti):
        """Sets the jti of this IntrospectRptResponse.


        :param jti: The jti of this IntrospectRptResponse.  # noqa: E501
        :type: str
        """

        self._jti = jti

    @property
    def permissions(self):
        """Gets the permissions of this IntrospectRptResponse.  # noqa: E501


        :return: The permissions of this IntrospectRptResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this IntrospectRptResponse.


        :param permissions: The permissions of this IntrospectRptResponse.  # noqa: E501
        :type: list[object]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntrospectRptResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntrospectRptResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
