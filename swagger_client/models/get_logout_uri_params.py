# coding: utf-8

"""
    oxd-server

    oxd-server  # noqa: E501

    OpenAPI spec version: 4.0
    Contact: yuriyz@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetLogoutUriParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'oxd_id': 'str',
        'id_token_hint': 'str',
        'post_logout_redirect_uri': 'str',
        'state': 'str',
        'session_state': 'str'
    }

    attribute_map = {
        'oxd_id': 'oxd_id',
        'id_token_hint': 'id_token_hint',
        'post_logout_redirect_uri': 'post_logout_redirect_uri',
        'state': 'state',
        'session_state': 'session_state'
    }

    def __init__(self, oxd_id=None, id_token_hint=None, post_logout_redirect_uri=None, state=None, session_state=None):  # noqa: E501
        """GetLogoutUriParams - a model defined in Swagger"""  # noqa: E501

        self._oxd_id = None
        self._id_token_hint = None
        self._post_logout_redirect_uri = None
        self._state = None
        self._session_state = None
        self.discriminator = None

        self.oxd_id = oxd_id
        self.id_token_hint = id_token_hint
        self.post_logout_redirect_uri = post_logout_redirect_uri
        self.state = state
        self.session_state = session_state

    @property
    def oxd_id(self):
        """Gets the oxd_id of this GetLogoutUriParams.  # noqa: E501


        :return: The oxd_id of this GetLogoutUriParams.  # noqa: E501
        :rtype: str
        """
        return self._oxd_id

    @oxd_id.setter
    def oxd_id(self, oxd_id):
        """Sets the oxd_id of this GetLogoutUriParams.


        :param oxd_id: The oxd_id of this GetLogoutUriParams.  # noqa: E501
        :type: str
        """
        if oxd_id is None:
            raise ValueError("Invalid value for `oxd_id`, must not be `None`")  # noqa: E501

        self._oxd_id = oxd_id

    @property
    def id_token_hint(self):
        """Gets the id_token_hint of this GetLogoutUriParams.  # noqa: E501


        :return: The id_token_hint of this GetLogoutUriParams.  # noqa: E501
        :rtype: str
        """
        return self._id_token_hint

    @id_token_hint.setter
    def id_token_hint(self, id_token_hint):
        """Sets the id_token_hint of this GetLogoutUriParams.


        :param id_token_hint: The id_token_hint of this GetLogoutUriParams.  # noqa: E501
        :type: str
        """
        if id_token_hint is None:
            raise ValueError("Invalid value for `id_token_hint`, must not be `None`")  # noqa: E501

        self._id_token_hint = id_token_hint

    @property
    def post_logout_redirect_uri(self):
        """Gets the post_logout_redirect_uri of this GetLogoutUriParams.  # noqa: E501


        :return: The post_logout_redirect_uri of this GetLogoutUriParams.  # noqa: E501
        :rtype: str
        """
        return self._post_logout_redirect_uri

    @post_logout_redirect_uri.setter
    def post_logout_redirect_uri(self, post_logout_redirect_uri):
        """Sets the post_logout_redirect_uri of this GetLogoutUriParams.


        :param post_logout_redirect_uri: The post_logout_redirect_uri of this GetLogoutUriParams.  # noqa: E501
        :type: str
        """
        if post_logout_redirect_uri is None:
            raise ValueError("Invalid value for `post_logout_redirect_uri`, must not be `None`")  # noqa: E501

        self._post_logout_redirect_uri = post_logout_redirect_uri

    @property
    def state(self):
        """Gets the state of this GetLogoutUriParams.  # noqa: E501


        :return: The state of this GetLogoutUriParams.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetLogoutUriParams.


        :param state: The state of this GetLogoutUriParams.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def session_state(self):
        """Gets the session_state of this GetLogoutUriParams.  # noqa: E501


        :return: The session_state of this GetLogoutUriParams.  # noqa: E501
        :rtype: str
        """
        return self._session_state

    @session_state.setter
    def session_state(self, session_state):
        """Sets the session_state of this GetLogoutUriParams.


        :param session_state: The session_state of this GetLogoutUriParams.  # noqa: E501
        :type: str
        """
        if session_state is None:
            raise ValueError("Invalid value for `session_state`, must not be `None`")  # noqa: E501

        self._session_state = session_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLogoutUriParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLogoutUriParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
