# coding: utf-8

"""
    oxd-server

    oxd-server  # noqa: E501

    OpenAPI spec version: 4.0
    Contact: yuriyz@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JsonWebKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kid': 'str',
        'kty': 'str',
        'use': 'str',
        'key_ops': 'str',
        'alg': 'str',
        'exp': 'int',
        'x5c': 'list[str]',
        'x5t': 'list[str]',
        'x5t_s256': 'str',
        'x5u': 'str'
    }

    attribute_map = {
        'kid': 'kid',
        'kty': 'kty',
        'use': 'use',
        'key_ops': 'key_ops',
        'alg': 'alg',
        'exp': 'exp',
        'x5c': 'x5c',
        'x5t': 'x5t',
        'x5t_s256': 'x5t#S256',
        'x5u': 'x5u'
    }

    def __init__(self, kid=None, kty=None, use=None, key_ops=None, alg=None, exp=None, x5c=None, x5t=None, x5t_s256=None, x5u=None):  # noqa: E501
        """JsonWebKey - a model defined in Swagger"""  # noqa: E501

        self._kid = None
        self._kty = None
        self._use = None
        self._key_ops = None
        self._alg = None
        self._exp = None
        self._x5c = None
        self._x5t = None
        self._x5t_s256 = None
        self._x5u = None
        self.discriminator = None

        self.kid = kid
        self.kty = kty
        self.use = use
        self.key_ops = key_ops
        self.alg = alg
        self.exp = exp
        self.x5c = x5c
        self.x5t = x5t
        if x5t_s256 is not None:
            self.x5t_s256 = x5t_s256
        self.x5u = x5u

    @property
    def kid(self):
        """Gets the kid of this JsonWebKey.  # noqa: E501


        :return: The kid of this JsonWebKey.  # noqa: E501
        :rtype: str
        """
        return self._kid

    @kid.setter
    def kid(self, kid):
        """Sets the kid of this JsonWebKey.


        :param kid: The kid of this JsonWebKey.  # noqa: E501
        :type: str
        """
        if kid is None:
            raise ValueError("Invalid value for `kid`, must not be `None`")  # noqa: E501

        self._kid = kid

    @property
    def kty(self):
        """Gets the kty of this JsonWebKey.  # noqa: E501


        :return: The kty of this JsonWebKey.  # noqa: E501
        :rtype: str
        """
        return self._kty

    @kty.setter
    def kty(self, kty):
        """Sets the kty of this JsonWebKey.


        :param kty: The kty of this JsonWebKey.  # noqa: E501
        :type: str
        """
        if kty is None:
            raise ValueError("Invalid value for `kty`, must not be `None`")  # noqa: E501

        self._kty = kty

    @property
    def use(self):
        """Gets the use of this JsonWebKey.  # noqa: E501


        :return: The use of this JsonWebKey.  # noqa: E501
        :rtype: str
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this JsonWebKey.


        :param use: The use of this JsonWebKey.  # noqa: E501
        :type: str
        """
        if use is None:
            raise ValueError("Invalid value for `use`, must not be `None`")  # noqa: E501

        self._use = use

    @property
    def key_ops(self):
        """Gets the key_ops of this JsonWebKey.  # noqa: E501


        :return: The key_ops of this JsonWebKey.  # noqa: E501
        :rtype: str
        """
        return self._key_ops

    @key_ops.setter
    def key_ops(self, key_ops):
        """Sets the key_ops of this JsonWebKey.


        :param key_ops: The key_ops of this JsonWebKey.  # noqa: E501
        :type: str
        """
        if key_ops is None:
            raise ValueError("Invalid value for `key_ops`, must not be `None`")  # noqa: E501

        self._key_ops = key_ops

    @property
    def alg(self):
        """Gets the alg of this JsonWebKey.  # noqa: E501


        :return: The alg of this JsonWebKey.  # noqa: E501
        :rtype: str
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this JsonWebKey.


        :param alg: The alg of this JsonWebKey.  # noqa: E501
        :type: str
        """
        if alg is None:
            raise ValueError("Invalid value for `alg`, must not be `None`")  # noqa: E501

        self._alg = alg

    @property
    def exp(self):
        """Gets the exp of this JsonWebKey.  # noqa: E501


        :return: The exp of this JsonWebKey.  # noqa: E501
        :rtype: int
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """Sets the exp of this JsonWebKey.


        :param exp: The exp of this JsonWebKey.  # noqa: E501
        :type: int
        """
        if exp is None:
            raise ValueError("Invalid value for `exp`, must not be `None`")  # noqa: E501

        self._exp = exp

    @property
    def x5c(self):
        """Gets the x5c of this JsonWebKey.  # noqa: E501


        :return: The x5c of this JsonWebKey.  # noqa: E501
        :rtype: list[str]
        """
        return self._x5c

    @x5c.setter
    def x5c(self, x5c):
        """Sets the x5c of this JsonWebKey.


        :param x5c: The x5c of this JsonWebKey.  # noqa: E501
        :type: list[str]
        """
        if x5c is None:
            raise ValueError("Invalid value for `x5c`, must not be `None`")  # noqa: E501

        self._x5c = x5c

    @property
    def x5t(self):
        """Gets the x5t of this JsonWebKey.  # noqa: E501


        :return: The x5t of this JsonWebKey.  # noqa: E501
        :rtype: list[str]
        """
        return self._x5t

    @x5t.setter
    def x5t(self, x5t):
        """Sets the x5t of this JsonWebKey.


        :param x5t: The x5t of this JsonWebKey.  # noqa: E501
        :type: list[str]
        """
        if x5t is None:
            raise ValueError("Invalid value for `x5t`, must not be `None`")  # noqa: E501

        self._x5t = x5t

    @property
    def x5t_s256(self):
        """Gets the x5t_s256 of this JsonWebKey.  # noqa: E501


        :return: The x5t_s256 of this JsonWebKey.  # noqa: E501
        :rtype: str
        """
        return self._x5t_s256

    @x5t_s256.setter
    def x5t_s256(self, x5t_s256):
        """Sets the x5t_s256 of this JsonWebKey.


        :param x5t_s256: The x5t_s256 of this JsonWebKey.  # noqa: E501
        :type: str
        """

        self._x5t_s256 = x5t_s256

    @property
    def x5u(self):
        """Gets the x5u of this JsonWebKey.  # noqa: E501


        :return: The x5u of this JsonWebKey.  # noqa: E501
        :rtype: str
        """
        return self._x5u

    @x5u.setter
    def x5u(self, x5u):
        """Sets the x5u of this JsonWebKey.


        :param x5u: The x5u of this JsonWebKey.  # noqa: E501
        :type: str
        """
        if x5u is None:
            raise ValueError("Invalid value for `x5u`, must not be `None`")  # noqa: E501

        self._x5u = x5u

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JsonWebKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonWebKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
