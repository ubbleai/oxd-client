# coding: utf-8

"""
    oxd-server

    oxd-server  # noqa: E501

    OpenAPI spec version: 4.0
    Contact: yuriyz@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateSiteParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'oxd_id': 'str',
        'redirect_uris': 'list[str]',
        'post_logout_redirect_uris': 'list[str]',
        'response_types': 'list[str]',
        'grant_types': 'list[str]',
        'scope': 'list[str]',
        'acr_values': 'list[str]',
        'client_jwks_uri': 'str',
        'client_token_endpoint_auth_method': 'str',
        'client_request_uris': 'list[str]',
        'client_sector_identifier_uri': 'str',
        'contacts': 'list[str]',
        'ui_locales': 'list[str]',
        'claims_locales': 'list[str]',
        'access_token_as_jwt': 'bool',
        'access_token_signing_alg': 'str',
        'rpt_as_jwt': 'bool',
        'claims_redirect_uri': 'list[str]',
        'client_token_endpoint_auth_signing_alg': 'str',
        'trusted_client': 'bool',
        'client_name': 'str',
        'logo_uri': 'str',
        'client_uri': 'str',
        'policy_uri': 'str',
        'front_channel_logout_session_required': 'bool',
        'tos_uri': 'str',
        'jwks': 'str',
        'id_token_binding_cnf': 'str',
        'tls_client_auth_subject_dn': 'str',
        'run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims': 'bool',
        'id_token_signed_response_alg': 'str',
        'id_token_encrypted_response_alg': 'str',
        'id_token_encrypted_response_enc': 'str',
        'user_info_signed_response_alg': 'str',
        'user_info_encrypted_response_alg': 'str',
        'user_info_encrypted_response_enc': 'str',
        'request_object_signing_alg': 'str',
        'request_object_encryption_alg': 'str',
        'request_object_encryption_enc': 'str',
        'default_max_age': 'int',
        'require_auth_time': 'bool',
        'initiate_login_uri': 'str',
        'authorized_origins': 'list[str]',
        'access_token_lifetime': 'int',
        'software_id': 'str',
        'software_version': 'str',
        'software_statement': 'str',
        'custom_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'oxd_id': 'oxd_id',
        'redirect_uris': 'redirect_uris',
        'post_logout_redirect_uris': 'post_logout_redirect_uris',
        'response_types': 'response_types',
        'grant_types': 'grant_types',
        'scope': 'scope',
        'acr_values': 'acr_values',
        'client_jwks_uri': 'client_jwks_uri',
        'client_token_endpoint_auth_method': 'client_token_endpoint_auth_method',
        'client_request_uris': 'client_request_uris',
        'client_sector_identifier_uri': 'client_sector_identifier_uri',
        'contacts': 'contacts',
        'ui_locales': 'ui_locales',
        'claims_locales': 'claims_locales',
        'access_token_as_jwt': 'access_token_as_jwt',
        'access_token_signing_alg': 'access_token_signing_alg',
        'rpt_as_jwt': 'rpt_as_jwt',
        'claims_redirect_uri': 'claims_redirect_uri',
        'client_token_endpoint_auth_signing_alg': 'client_token_endpoint_auth_signing_alg',
        'trusted_client': 'trusted_client',
        'client_name': 'client_name',
        'logo_uri': 'logo_uri',
        'client_uri': 'client_uri',
        'policy_uri': 'policy_uri',
        'front_channel_logout_session_required': 'front_channel_logout_session_required',
        'tos_uri': 'tos_uri',
        'jwks': 'jwks',
        'id_token_binding_cnf': 'id_token_binding_cnf',
        'tls_client_auth_subject_dn': 'tls_client_auth_subject_dn',
        'run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims': 'run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims',
        'id_token_signed_response_alg': 'id_token_signed_response_alg',
        'id_token_encrypted_response_alg': 'id_token_encrypted_response_alg',
        'id_token_encrypted_response_enc': 'id_token_encrypted_response_enc',
        'user_info_signed_response_alg': 'user_info_signed_response_alg',
        'user_info_encrypted_response_alg': 'user_info_encrypted_response_alg',
        'user_info_encrypted_response_enc': 'user_info_encrypted_response_enc',
        'request_object_signing_alg': 'request_object_signing_alg',
        'request_object_encryption_alg': 'request_object_encryption_alg',
        'request_object_encryption_enc': 'request_object_encryption_enc',
        'default_max_age': 'default_max_age',
        'require_auth_time': 'require_auth_time',
        'initiate_login_uri': 'initiate_login_uri',
        'authorized_origins': 'authorized_origins',
        'access_token_lifetime': 'access_token_lifetime',
        'software_id': 'software_id',
        'software_version': 'software_version',
        'software_statement': 'software_statement',
        'custom_attributes': 'custom_attributes'
    }

    def __init__(self, oxd_id=None, redirect_uris=None, post_logout_redirect_uris=None, response_types=None, grant_types=None, scope=None, acr_values=None, client_jwks_uri=None, client_token_endpoint_auth_method=None, client_request_uris=None, client_sector_identifier_uri=None, contacts=None, ui_locales=None, claims_locales=None, access_token_as_jwt=None, access_token_signing_alg=None, rpt_as_jwt=None, claims_redirect_uri=None, client_token_endpoint_auth_signing_alg=None, trusted_client=None, client_name=None, logo_uri=None, client_uri=None, policy_uri=None, front_channel_logout_session_required=None, tos_uri=None, jwks=None, id_token_binding_cnf=None, tls_client_auth_subject_dn=None, run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims=None, id_token_signed_response_alg=None, id_token_encrypted_response_alg=None, id_token_encrypted_response_enc=None, user_info_signed_response_alg=None, user_info_encrypted_response_alg=None, user_info_encrypted_response_enc=None, request_object_signing_alg=None, request_object_encryption_alg=None, request_object_encryption_enc=None, default_max_age=None, require_auth_time=None, initiate_login_uri=None, authorized_origins=None, access_token_lifetime=None, software_id=None, software_version=None, software_statement=None, custom_attributes=None):  # noqa: E501
        """UpdateSiteParams - a model defined in Swagger"""  # noqa: E501

        self._oxd_id = None
        self._redirect_uris = None
        self._post_logout_redirect_uris = None
        self._response_types = None
        self._grant_types = None
        self._scope = None
        self._acr_values = None
        self._client_jwks_uri = None
        self._client_token_endpoint_auth_method = None
        self._client_request_uris = None
        self._client_sector_identifier_uri = None
        self._contacts = None
        self._ui_locales = None
        self._claims_locales = None
        self._access_token_as_jwt = None
        self._access_token_signing_alg = None
        self._rpt_as_jwt = None
        self._claims_redirect_uri = None
        self._client_token_endpoint_auth_signing_alg = None
        self._trusted_client = None
        self._client_name = None
        self._logo_uri = None
        self._client_uri = None
        self._policy_uri = None
        self._front_channel_logout_session_required = None
        self._tos_uri = None
        self._jwks = None
        self._id_token_binding_cnf = None
        self._tls_client_auth_subject_dn = None
        self._run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims = None
        self._id_token_signed_response_alg = None
        self._id_token_encrypted_response_alg = None
        self._id_token_encrypted_response_enc = None
        self._user_info_signed_response_alg = None
        self._user_info_encrypted_response_alg = None
        self._user_info_encrypted_response_enc = None
        self._request_object_signing_alg = None
        self._request_object_encryption_alg = None
        self._request_object_encryption_enc = None
        self._default_max_age = None
        self._require_auth_time = None
        self._initiate_login_uri = None
        self._authorized_origins = None
        self._access_token_lifetime = None
        self._software_id = None
        self._software_version = None
        self._software_statement = None
        self._custom_attributes = None
        self.discriminator = None

        self.oxd_id = oxd_id
        if redirect_uris is not None:
            self.redirect_uris = redirect_uris
        if post_logout_redirect_uris is not None:
            self.post_logout_redirect_uris = post_logout_redirect_uris
        if response_types is not None:
            self.response_types = response_types
        if grant_types is not None:
            self.grant_types = grant_types
        if scope is not None:
            self.scope = scope
        if acr_values is not None:
            self.acr_values = acr_values
        if client_jwks_uri is not None:
            self.client_jwks_uri = client_jwks_uri
        if client_token_endpoint_auth_method is not None:
            self.client_token_endpoint_auth_method = client_token_endpoint_auth_method
        if client_request_uris is not None:
            self.client_request_uris = client_request_uris
        if client_sector_identifier_uri is not None:
            self.client_sector_identifier_uri = client_sector_identifier_uri
        if contacts is not None:
            self.contacts = contacts
        if ui_locales is not None:
            self.ui_locales = ui_locales
        if claims_locales is not None:
            self.claims_locales = claims_locales
        if access_token_as_jwt is not None:
            self.access_token_as_jwt = access_token_as_jwt
        if access_token_signing_alg is not None:
            self.access_token_signing_alg = access_token_signing_alg
        if rpt_as_jwt is not None:
            self.rpt_as_jwt = rpt_as_jwt
        if claims_redirect_uri is not None:
            self.claims_redirect_uri = claims_redirect_uri
        if client_token_endpoint_auth_signing_alg is not None:
            self.client_token_endpoint_auth_signing_alg = client_token_endpoint_auth_signing_alg
        if trusted_client is not None:
            self.trusted_client = trusted_client
        if client_name is not None:
            self.client_name = client_name
        if logo_uri is not None:
            self.logo_uri = logo_uri
        if client_uri is not None:
            self.client_uri = client_uri
        if policy_uri is not None:
            self.policy_uri = policy_uri
        if front_channel_logout_session_required is not None:
            self.front_channel_logout_session_required = front_channel_logout_session_required
        if tos_uri is not None:
            self.tos_uri = tos_uri
        if jwks is not None:
            self.jwks = jwks
        if id_token_binding_cnf is not None:
            self.id_token_binding_cnf = id_token_binding_cnf
        if tls_client_auth_subject_dn is not None:
            self.tls_client_auth_subject_dn = tls_client_auth_subject_dn
        if run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims is not None:
            self.run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims = run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims
        if id_token_signed_response_alg is not None:
            self.id_token_signed_response_alg = id_token_signed_response_alg
        if id_token_encrypted_response_alg is not None:
            self.id_token_encrypted_response_alg = id_token_encrypted_response_alg
        if id_token_encrypted_response_enc is not None:
            self.id_token_encrypted_response_enc = id_token_encrypted_response_enc
        if user_info_signed_response_alg is not None:
            self.user_info_signed_response_alg = user_info_signed_response_alg
        if user_info_encrypted_response_alg is not None:
            self.user_info_encrypted_response_alg = user_info_encrypted_response_alg
        if user_info_encrypted_response_enc is not None:
            self.user_info_encrypted_response_enc = user_info_encrypted_response_enc
        if request_object_signing_alg is not None:
            self.request_object_signing_alg = request_object_signing_alg
        if request_object_encryption_alg is not None:
            self.request_object_encryption_alg = request_object_encryption_alg
        if request_object_encryption_enc is not None:
            self.request_object_encryption_enc = request_object_encryption_enc
        if default_max_age is not None:
            self.default_max_age = default_max_age
        if require_auth_time is not None:
            self.require_auth_time = require_auth_time
        if initiate_login_uri is not None:
            self.initiate_login_uri = initiate_login_uri
        if authorized_origins is not None:
            self.authorized_origins = authorized_origins
        if access_token_lifetime is not None:
            self.access_token_lifetime = access_token_lifetime
        if software_id is not None:
            self.software_id = software_id
        if software_version is not None:
            self.software_version = software_version
        if software_statement is not None:
            self.software_statement = software_statement
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes

    @property
    def oxd_id(self):
        """Gets the oxd_id of this UpdateSiteParams.  # noqa: E501


        :return: The oxd_id of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._oxd_id

    @oxd_id.setter
    def oxd_id(self, oxd_id):
        """Sets the oxd_id of this UpdateSiteParams.


        :param oxd_id: The oxd_id of this UpdateSiteParams.  # noqa: E501
        :type: str
        """
        if oxd_id is None:
            raise ValueError("Invalid value for `oxd_id`, must not be `None`")  # noqa: E501

        self._oxd_id = oxd_id

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this UpdateSiteParams.  # noqa: E501

        Provide the list of redirection URIs. The first URL is where the user will be redirected after successful authorization at the OpenID Connect Provider (OP).  # noqa: E501

        :return: The redirect_uris of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this UpdateSiteParams.

        Provide the list of redirection URIs. The first URL is where the user will be redirected after successful authorization at the OpenID Connect Provider (OP).  # noqa: E501

        :param redirect_uris: The redirect_uris of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._redirect_uris = redirect_uris

    @property
    def post_logout_redirect_uris(self):
        """Gets the post_logout_redirect_uris of this UpdateSiteParams.  # noqa: E501


        :return: The post_logout_redirect_uris of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._post_logout_redirect_uris

    @post_logout_redirect_uris.setter
    def post_logout_redirect_uris(self, post_logout_redirect_uris):
        """Sets the post_logout_redirect_uris of this UpdateSiteParams.


        :param post_logout_redirect_uris: The post_logout_redirect_uris of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._post_logout_redirect_uris = post_logout_redirect_uris

    @property
    def response_types(self):
        """Gets the response_types of this UpdateSiteParams.  # noqa: E501


        :return: The response_types of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types

    @response_types.setter
    def response_types(self, response_types):
        """Sets the response_types of this UpdateSiteParams.


        :param response_types: The response_types of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._response_types = response_types

    @property
    def grant_types(self):
        """Gets the grant_types of this UpdateSiteParams.  # noqa: E501


        :return: The grant_types of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this UpdateSiteParams.


        :param grant_types: The grant_types of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._grant_types = grant_types

    @property
    def scope(self):
        """Gets the scope of this UpdateSiteParams.  # noqa: E501


        :return: The scope of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this UpdateSiteParams.


        :param scope: The scope of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._scope = scope

    @property
    def acr_values(self):
        """Gets the acr_values of this UpdateSiteParams.  # noqa: E501


        :return: The acr_values of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._acr_values

    @acr_values.setter
    def acr_values(self, acr_values):
        """Sets the acr_values of this UpdateSiteParams.


        :param acr_values: The acr_values of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._acr_values = acr_values

    @property
    def client_jwks_uri(self):
        """Gets the client_jwks_uri of this UpdateSiteParams.  # noqa: E501


        :return: The client_jwks_uri of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._client_jwks_uri

    @client_jwks_uri.setter
    def client_jwks_uri(self, client_jwks_uri):
        """Sets the client_jwks_uri of this UpdateSiteParams.


        :param client_jwks_uri: The client_jwks_uri of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._client_jwks_uri = client_jwks_uri

    @property
    def client_token_endpoint_auth_method(self):
        """Gets the client_token_endpoint_auth_method of this UpdateSiteParams.  # noqa: E501


        :return: The client_token_endpoint_auth_method of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._client_token_endpoint_auth_method

    @client_token_endpoint_auth_method.setter
    def client_token_endpoint_auth_method(self, client_token_endpoint_auth_method):
        """Sets the client_token_endpoint_auth_method of this UpdateSiteParams.


        :param client_token_endpoint_auth_method: The client_token_endpoint_auth_method of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._client_token_endpoint_auth_method = client_token_endpoint_auth_method

    @property
    def client_request_uris(self):
        """Gets the client_request_uris of this UpdateSiteParams.  # noqa: E501


        :return: The client_request_uris of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_request_uris

    @client_request_uris.setter
    def client_request_uris(self, client_request_uris):
        """Sets the client_request_uris of this UpdateSiteParams.


        :param client_request_uris: The client_request_uris of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._client_request_uris = client_request_uris

    @property
    def client_sector_identifier_uri(self):
        """Gets the client_sector_identifier_uri of this UpdateSiteParams.  # noqa: E501


        :return: The client_sector_identifier_uri of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._client_sector_identifier_uri

    @client_sector_identifier_uri.setter
    def client_sector_identifier_uri(self, client_sector_identifier_uri):
        """Sets the client_sector_identifier_uri of this UpdateSiteParams.


        :param client_sector_identifier_uri: The client_sector_identifier_uri of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._client_sector_identifier_uri = client_sector_identifier_uri

    @property
    def contacts(self):
        """Gets the contacts of this UpdateSiteParams.  # noqa: E501


        :return: The contacts of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this UpdateSiteParams.


        :param contacts: The contacts of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._contacts = contacts

    @property
    def ui_locales(self):
        """Gets the ui_locales of this UpdateSiteParams.  # noqa: E501


        :return: The ui_locales of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._ui_locales

    @ui_locales.setter
    def ui_locales(self, ui_locales):
        """Sets the ui_locales of this UpdateSiteParams.


        :param ui_locales: The ui_locales of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._ui_locales = ui_locales

    @property
    def claims_locales(self):
        """Gets the claims_locales of this UpdateSiteParams.  # noqa: E501


        :return: The claims_locales of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims_locales

    @claims_locales.setter
    def claims_locales(self, claims_locales):
        """Sets the claims_locales of this UpdateSiteParams.


        :param claims_locales: The claims_locales of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._claims_locales = claims_locales

    @property
    def access_token_as_jwt(self):
        """Gets the access_token_as_jwt of this UpdateSiteParams.  # noqa: E501

        specifies whether access_token should be return as JWT or not. Default value is false.  # noqa: E501

        :return: The access_token_as_jwt of this UpdateSiteParams.  # noqa: E501
        :rtype: bool
        """
        return self._access_token_as_jwt

    @access_token_as_jwt.setter
    def access_token_as_jwt(self, access_token_as_jwt):
        """Sets the access_token_as_jwt of this UpdateSiteParams.

        specifies whether access_token should be return as JWT or not. Default value is false.  # noqa: E501

        :param access_token_as_jwt: The access_token_as_jwt of this UpdateSiteParams.  # noqa: E501
        :type: bool
        """

        self._access_token_as_jwt = access_token_as_jwt

    @property
    def access_token_signing_alg(self):
        """Gets the access_token_signing_alg of this UpdateSiteParams.  # noqa: E501

        sets signing algorithm used for JWT signing. Valid values are none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512  # noqa: E501

        :return: The access_token_signing_alg of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._access_token_signing_alg

    @access_token_signing_alg.setter
    def access_token_signing_alg(self, access_token_signing_alg):
        """Sets the access_token_signing_alg of this UpdateSiteParams.

        sets signing algorithm used for JWT signing. Valid values are none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512  # noqa: E501

        :param access_token_signing_alg: The access_token_signing_alg of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._access_token_signing_alg = access_token_signing_alg

    @property
    def rpt_as_jwt(self):
        """Gets the rpt_as_jwt of this UpdateSiteParams.  # noqa: E501

        specifies whether RPT should be return as JWT or not. Default value is false.  # noqa: E501

        :return: The rpt_as_jwt of this UpdateSiteParams.  # noqa: E501
        :rtype: bool
        """
        return self._rpt_as_jwt

    @rpt_as_jwt.setter
    def rpt_as_jwt(self, rpt_as_jwt):
        """Sets the rpt_as_jwt of this UpdateSiteParams.

        specifies whether RPT should be return as JWT or not. Default value is false.  # noqa: E501

        :param rpt_as_jwt: The rpt_as_jwt of this UpdateSiteParams.  # noqa: E501
        :type: bool
        """

        self._rpt_as_jwt = rpt_as_jwt

    @property
    def claims_redirect_uri(self):
        """Gets the claims_redirect_uri of this UpdateSiteParams.  # noqa: E501


        :return: The claims_redirect_uri of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims_redirect_uri

    @claims_redirect_uri.setter
    def claims_redirect_uri(self, claims_redirect_uri):
        """Sets the claims_redirect_uri of this UpdateSiteParams.


        :param claims_redirect_uri: The claims_redirect_uri of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._claims_redirect_uri = claims_redirect_uri

    @property
    def client_token_endpoint_auth_signing_alg(self):
        """Gets the client_token_endpoint_auth_signing_alg of this UpdateSiteParams.  # noqa: E501

        Provide the Requested Client Authentication method for the Token Endpoint. Valid values are none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512.  # noqa: E501

        :return: The client_token_endpoint_auth_signing_alg of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._client_token_endpoint_auth_signing_alg

    @client_token_endpoint_auth_signing_alg.setter
    def client_token_endpoint_auth_signing_alg(self, client_token_endpoint_auth_signing_alg):
        """Sets the client_token_endpoint_auth_signing_alg of this UpdateSiteParams.

        Provide the Requested Client Authentication method for the Token Endpoint. Valid values are none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512.  # noqa: E501

        :param client_token_endpoint_auth_signing_alg: The client_token_endpoint_auth_signing_alg of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._client_token_endpoint_auth_signing_alg = client_token_endpoint_auth_signing_alg

    @property
    def trusted_client(self):
        """Gets the trusted_client of this UpdateSiteParams.  # noqa: E501

        specifies whether client is trusted. Default value is false.  # noqa: E501

        :return: The trusted_client of this UpdateSiteParams.  # noqa: E501
        :rtype: bool
        """
        return self._trusted_client

    @trusted_client.setter
    def trusted_client(self, trusted_client):
        """Sets the trusted_client of this UpdateSiteParams.

        specifies whether client is trusted. Default value is false.  # noqa: E501

        :param trusted_client: The trusted_client of this UpdateSiteParams.  # noqa: E501
        :type: bool
        """

        self._trusted_client = trusted_client

    @property
    def client_name(self):
        """Gets the client_name of this UpdateSiteParams.  # noqa: E501

        oxd will generate its own non-human readable name by default if client_name is not specified  # noqa: E501

        :return: The client_name of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this UpdateSiteParams.

        oxd will generate its own non-human readable name by default if client_name is not specified  # noqa: E501

        :param client_name: The client_name of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def logo_uri(self):
        """Gets the logo_uri of this UpdateSiteParams.  # noqa: E501

        specifies an URL that references a logo for the Client application.  # noqa: E501

        :return: The logo_uri of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """Sets the logo_uri of this UpdateSiteParams.

        specifies an URL that references a logo for the Client application.  # noqa: E501

        :param logo_uri: The logo_uri of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._logo_uri = logo_uri

    @property
    def client_uri(self):
        """Gets the client_uri of this UpdateSiteParams.  # noqa: E501

        specifies an URL of the home page of the Client.  # noqa: E501

        :return: The client_uri of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """Sets the client_uri of this UpdateSiteParams.

        specifies an URL of the home page of the Client.  # noqa: E501

        :param client_uri: The client_uri of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._client_uri = client_uri

    @property
    def policy_uri(self):
        """Gets the policy_uri of this UpdateSiteParams.  # noqa: E501

        specifies an URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.  # noqa: E501

        :return: The policy_uri of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._policy_uri

    @policy_uri.setter
    def policy_uri(self, policy_uri):
        """Sets the policy_uri of this UpdateSiteParams.

        specifies an URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.  # noqa: E501

        :param policy_uri: The policy_uri of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._policy_uri = policy_uri

    @property
    def front_channel_logout_session_required(self):
        """Gets the front_channel_logout_session_required of this UpdateSiteParams.  # noqa: E501

        specifies if front channel logout session required.  # noqa: E501

        :return: The front_channel_logout_session_required of this UpdateSiteParams.  # noqa: E501
        :rtype: bool
        """
        return self._front_channel_logout_session_required

    @front_channel_logout_session_required.setter
    def front_channel_logout_session_required(self, front_channel_logout_session_required):
        """Sets the front_channel_logout_session_required of this UpdateSiteParams.

        specifies if front channel logout session required.  # noqa: E501

        :param front_channel_logout_session_required: The front_channel_logout_session_required of this UpdateSiteParams.  # noqa: E501
        :type: bool
        """

        self._front_channel_logout_session_required = front_channel_logout_session_required

    @property
    def tos_uri(self):
        """Gets the tos_uri of this UpdateSiteParams.  # noqa: E501

        specifies an URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms.  # noqa: E501

        :return: The tos_uri of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._tos_uri

    @tos_uri.setter
    def tos_uri(self, tos_uri):
        """Sets the tos_uri of this UpdateSiteParams.

        specifies an URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms.  # noqa: E501

        :param tos_uri: The tos_uri of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._tos_uri = tos_uri

    @property
    def jwks(self):
        """Gets the jwks of this UpdateSiteParams.  # noqa: E501

        Client's JSON Web Key Set (JWK) document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it does not enable key rotation. The jwks_uri and jwks parameters must not be used together.  # noqa: E501

        :return: The jwks of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._jwks

    @jwks.setter
    def jwks(self, jwks):
        """Sets the jwks of this UpdateSiteParams.

        Client's JSON Web Key Set (JWK) document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it does not enable key rotation. The jwks_uri and jwks parameters must not be used together.  # noqa: E501

        :param jwks: The jwks of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._jwks = jwks

    @property
    def id_token_binding_cnf(self):
        """Gets the id_token_binding_cnf of this UpdateSiteParams.  # noqa: E501


        :return: The id_token_binding_cnf of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._id_token_binding_cnf

    @id_token_binding_cnf.setter
    def id_token_binding_cnf(self, id_token_binding_cnf):
        """Sets the id_token_binding_cnf of this UpdateSiteParams.


        :param id_token_binding_cnf: The id_token_binding_cnf of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._id_token_binding_cnf = id_token_binding_cnf

    @property
    def tls_client_auth_subject_dn(self):
        """Gets the tls_client_auth_subject_dn of this UpdateSiteParams.  # noqa: E501


        :return: The tls_client_auth_subject_dn of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._tls_client_auth_subject_dn

    @tls_client_auth_subject_dn.setter
    def tls_client_auth_subject_dn(self, tls_client_auth_subject_dn):
        """Sets the tls_client_auth_subject_dn of this UpdateSiteParams.


        :param tls_client_auth_subject_dn: The tls_client_auth_subject_dn of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._tls_client_auth_subject_dn = tls_client_auth_subject_dn

    @property
    def run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims(self):
        """Gets the run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims of this UpdateSiteParams.  # noqa: E501

        choose to run introspection script before access_token_as_jwt creation and include claims.  # noqa: E501

        :return: The run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims of this UpdateSiteParams.  # noqa: E501
        :rtype: bool
        """
        return self._run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims

    @run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims.setter
    def run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims(self, run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims):
        """Sets the run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims of this UpdateSiteParams.

        choose to run introspection script before access_token_as_jwt creation and include claims.  # noqa: E501

        :param run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims: The run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims of this UpdateSiteParams.  # noqa: E501
        :type: bool
        """

        self._run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims = run_introspection_script_beforeaccess_token_as_jwt_creation_and_include_claims

    @property
    def id_token_signed_response_alg(self):
        """Gets the id_token_signed_response_alg of this UpdateSiteParams.  # noqa: E501

        choose the JWS alg algorithm (JWA) required for the ID Token issued to this client_id. Valid values are none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512  # noqa: E501

        :return: The id_token_signed_response_alg of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._id_token_signed_response_alg

    @id_token_signed_response_alg.setter
    def id_token_signed_response_alg(self, id_token_signed_response_alg):
        """Sets the id_token_signed_response_alg of this UpdateSiteParams.

        choose the JWS alg algorithm (JWA) required for the ID Token issued to this client_id. Valid values are none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512  # noqa: E501

        :param id_token_signed_response_alg: The id_token_signed_response_alg of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._id_token_signed_response_alg = id_token_signed_response_alg

    @property
    def id_token_encrypted_response_alg(self):
        """Gets the id_token_encrypted_response_alg of this UpdateSiteParams.  # noqa: E501

        choose the JWE alg algorithm (JWA) required for encrypting the ID Token issued to this client_id. Valid values are RSA1_5, RSA-OAEP, A128KW, A256KW  # noqa: E501

        :return: The id_token_encrypted_response_alg of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._id_token_encrypted_response_alg

    @id_token_encrypted_response_alg.setter
    def id_token_encrypted_response_alg(self, id_token_encrypted_response_alg):
        """Sets the id_token_encrypted_response_alg of this UpdateSiteParams.

        choose the JWE alg algorithm (JWA) required for encrypting the ID Token issued to this client_id. Valid values are RSA1_5, RSA-OAEP, A128KW, A256KW  # noqa: E501

        :param id_token_encrypted_response_alg: The id_token_encrypted_response_alg of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._id_token_encrypted_response_alg = id_token_encrypted_response_alg

    @property
    def id_token_encrypted_response_enc(self):
        """Gets the id_token_encrypted_response_enc of this UpdateSiteParams.  # noqa: E501

        choose the JWE enc algorithm (JWA) required for symmetric encryption of the ID Token issued to this client_id. Valid values are A128CBC+HS256, A256CBC+HS512, A128GCM, A256GCM  # noqa: E501

        :return: The id_token_encrypted_response_enc of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._id_token_encrypted_response_enc

    @id_token_encrypted_response_enc.setter
    def id_token_encrypted_response_enc(self, id_token_encrypted_response_enc):
        """Sets the id_token_encrypted_response_enc of this UpdateSiteParams.

        choose the JWE enc algorithm (JWA) required for symmetric encryption of the ID Token issued to this client_id. Valid values are A128CBC+HS256, A256CBC+HS512, A128GCM, A256GCM  # noqa: E501

        :param id_token_encrypted_response_enc: The id_token_encrypted_response_enc of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._id_token_encrypted_response_enc = id_token_encrypted_response_enc

    @property
    def user_info_signed_response_alg(self):
        """Gets the user_info_signed_response_alg of this UpdateSiteParams.  # noqa: E501

        choose the JWS alg algorithm (JWA) required for UserInfo responses. Valid values are none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512  # noqa: E501

        :return: The user_info_signed_response_alg of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._user_info_signed_response_alg

    @user_info_signed_response_alg.setter
    def user_info_signed_response_alg(self, user_info_signed_response_alg):
        """Sets the user_info_signed_response_alg of this UpdateSiteParams.

        choose the JWS alg algorithm (JWA) required for UserInfo responses. Valid values are none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512  # noqa: E501

        :param user_info_signed_response_alg: The user_info_signed_response_alg of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._user_info_signed_response_alg = user_info_signed_response_alg

    @property
    def user_info_encrypted_response_alg(self):
        """Gets the user_info_encrypted_response_alg of this UpdateSiteParams.  # noqa: E501

        choose the JWE alg algorithm (JWA) required for encrypting UserInfo responses. Valid values are RSA1_5, RSA_OAEP, A128KW, A256KW  # noqa: E501

        :return: The user_info_encrypted_response_alg of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._user_info_encrypted_response_alg

    @user_info_encrypted_response_alg.setter
    def user_info_encrypted_response_alg(self, user_info_encrypted_response_alg):
        """Sets the user_info_encrypted_response_alg of this UpdateSiteParams.

        choose the JWE alg algorithm (JWA) required for encrypting UserInfo responses. Valid values are RSA1_5, RSA_OAEP, A128KW, A256KW  # noqa: E501

        :param user_info_encrypted_response_alg: The user_info_encrypted_response_alg of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._user_info_encrypted_response_alg = user_info_encrypted_response_alg

    @property
    def user_info_encrypted_response_enc(self):
        """Gets the user_info_encrypted_response_enc of this UpdateSiteParams.  # noqa: E501

        choose the JWE enc algorithm (JWA) required for symmetric encryption of UserInfo responses. Valid values are A128CBC+HS256, A256CBC+HS512, A128GCM, A256GCM  # noqa: E501

        :return: The user_info_encrypted_response_enc of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._user_info_encrypted_response_enc

    @user_info_encrypted_response_enc.setter
    def user_info_encrypted_response_enc(self, user_info_encrypted_response_enc):
        """Sets the user_info_encrypted_response_enc of this UpdateSiteParams.

        choose the JWE enc algorithm (JWA) required for symmetric encryption of UserInfo responses. Valid values are A128CBC+HS256, A256CBC+HS512, A128GCM, A256GCM  # noqa: E501

        :param user_info_encrypted_response_enc: The user_info_encrypted_response_enc of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._user_info_encrypted_response_enc = user_info_encrypted_response_enc

    @property
    def request_object_signing_alg(self):
        """Gets the request_object_signing_alg of this UpdateSiteParams.  # noqa: E501

        choose the JWS alg algorithm (JWA) that must be required by the Authorization Server. Valid values are none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512  # noqa: E501

        :return: The request_object_signing_alg of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._request_object_signing_alg

    @request_object_signing_alg.setter
    def request_object_signing_alg(self, request_object_signing_alg):
        """Sets the request_object_signing_alg of this UpdateSiteParams.

        choose the JWS alg algorithm (JWA) that must be required by the Authorization Server. Valid values are none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512  # noqa: E501

        :param request_object_signing_alg: The request_object_signing_alg of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._request_object_signing_alg = request_object_signing_alg

    @property
    def request_object_encryption_alg(self):
        """Gets the request_object_encryption_alg of this UpdateSiteParams.  # noqa: E501

        choose the JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. Valid values are RSA1_5, RSA_OAEP, A128KW, A256KW  # noqa: E501

        :return: The request_object_encryption_alg of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._request_object_encryption_alg

    @request_object_encryption_alg.setter
    def request_object_encryption_alg(self, request_object_encryption_alg):
        """Sets the request_object_encryption_alg of this UpdateSiteParams.

        choose the JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. Valid values are RSA1_5, RSA_OAEP, A128KW, A256KW  # noqa: E501

        :param request_object_encryption_alg: The request_object_encryption_alg of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._request_object_encryption_alg = request_object_encryption_alg

    @property
    def request_object_encryption_enc(self):
        """Gets the request_object_encryption_enc of this UpdateSiteParams.  # noqa: E501

        choose the JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. Valid values are A128CBC+HS256, A256CBC+HS512, A128GCM, A256GCM  # noqa: E501

        :return: The request_object_encryption_enc of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._request_object_encryption_enc

    @request_object_encryption_enc.setter
    def request_object_encryption_enc(self, request_object_encryption_enc):
        """Sets the request_object_encryption_enc of this UpdateSiteParams.

        choose the JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. Valid values are A128CBC+HS256, A256CBC+HS512, A128GCM, A256GCM  # noqa: E501

        :param request_object_encryption_enc: The request_object_encryption_enc of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._request_object_encryption_enc = request_object_encryption_enc

    @property
    def default_max_age(self):
        """Gets the default_max_age of this UpdateSiteParams.  # noqa: E501

        specifies the Default Maximum Authentication Age.  # noqa: E501

        :return: The default_max_age of this UpdateSiteParams.  # noqa: E501
        :rtype: int
        """
        return self._default_max_age

    @default_max_age.setter
    def default_max_age(self, default_max_age):
        """Sets the default_max_age of this UpdateSiteParams.

        specifies the Default Maximum Authentication Age.  # noqa: E501

        :param default_max_age: The default_max_age of this UpdateSiteParams.  # noqa: E501
        :type: int
        """

        self._default_max_age = default_max_age

    @property
    def require_auth_time(self):
        """Gets the require_auth_time of this UpdateSiteParams.  # noqa: E501

        specifies the Boolean value specifying whether the auth_time claim in the id_token is required. It is required when the value is true. The auth_time claim request in the request object overrides this setting.  # noqa: E501

        :return: The require_auth_time of this UpdateSiteParams.  # noqa: E501
        :rtype: bool
        """
        return self._require_auth_time

    @require_auth_time.setter
    def require_auth_time(self, require_auth_time):
        """Sets the require_auth_time of this UpdateSiteParams.

        specifies the Boolean value specifying whether the auth_time claim in the id_token is required. It is required when the value is true. The auth_time claim request in the request object overrides this setting.  # noqa: E501

        :param require_auth_time: The require_auth_time of this UpdateSiteParams.  # noqa: E501
        :type: bool
        """

        self._require_auth_time = require_auth_time

    @property
    def initiate_login_uri(self):
        """Gets the initiate_login_uri of this UpdateSiteParams.  # noqa: E501

        specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.  # noqa: E501

        :return: The initiate_login_uri of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._initiate_login_uri

    @initiate_login_uri.setter
    def initiate_login_uri(self, initiate_login_uri):
        """Sets the initiate_login_uri of this UpdateSiteParams.

        specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.  # noqa: E501

        :param initiate_login_uri: The initiate_login_uri of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._initiate_login_uri = initiate_login_uri

    @property
    def authorized_origins(self):
        """Gets the authorized_origins of this UpdateSiteParams.  # noqa: E501

        specifies authorized JavaScript origins.  # noqa: E501

        :return: The authorized_origins of this UpdateSiteParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorized_origins

    @authorized_origins.setter
    def authorized_origins(self, authorized_origins):
        """Sets the authorized_origins of this UpdateSiteParams.

        specifies authorized JavaScript origins.  # noqa: E501

        :param authorized_origins: The authorized_origins of this UpdateSiteParams.  # noqa: E501
        :type: list[str]
        """

        self._authorized_origins = authorized_origins

    @property
    def access_token_lifetime(self):
        """Gets the access_token_lifetime of this UpdateSiteParams.  # noqa: E501

        specifies the Client-specific access token expiration.  # noqa: E501

        :return: The access_token_lifetime of this UpdateSiteParams.  # noqa: E501
        :rtype: int
        """
        return self._access_token_lifetime

    @access_token_lifetime.setter
    def access_token_lifetime(self, access_token_lifetime):
        """Sets the access_token_lifetime of this UpdateSiteParams.

        specifies the Client-specific access token expiration.  # noqa: E501

        :param access_token_lifetime: The access_token_lifetime of this UpdateSiteParams.  # noqa: E501
        :type: int
        """

        self._access_token_lifetime = access_token_lifetime

    @property
    def software_id(self):
        """Gets the software_id of this UpdateSiteParams.  # noqa: E501

        specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.  # noqa: E501

        :return: The software_id of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._software_id

    @software_id.setter
    def software_id(self, software_id):
        """Sets the software_id of this UpdateSiteParams.

        specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.  # noqa: E501

        :param software_id: The software_id of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._software_id = software_id

    @property
    def software_version(self):
        """Gets the software_version of this UpdateSiteParams.  # noqa: E501

        specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'.  # noqa: E501

        :return: The software_version of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this UpdateSiteParams.

        specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'.  # noqa: E501

        :param software_version: The software_version of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def software_statement(self):
        """Gets the software_statement of this UpdateSiteParams.  # noqa: E501

        specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT.  # noqa: E501

        :return: The software_statement of this UpdateSiteParams.  # noqa: E501
        :rtype: str
        """
        return self._software_statement

    @software_statement.setter
    def software_statement(self, software_statement):
        """Sets the software_statement of this UpdateSiteParams.

        specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT.  # noqa: E501

        :param software_statement: The software_statement of this UpdateSiteParams.  # noqa: E501
        :type: str
        """

        self._software_statement = software_statement

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this UpdateSiteParams.  # noqa: E501

        specifies custom attribute map copy.  # noqa: E501

        :return: The custom_attributes of this UpdateSiteParams.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this UpdateSiteParams.

        specifies custom attribute map copy.  # noqa: E501

        :param custom_attributes: The custom_attributes of this UpdateSiteParams.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSiteParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSiteParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
